import controlP5.*;

ControlP5 cp5;
int rows;
int columns;
boolean start = false;
color snow = color(255, 255, 255);
color grass = color(143, 170, 64);
color rock = color(135, 135, 135);
color dirt = color(160, 126, 84);
color water = color(0, 75, 200);

Slider rows;
Slider columns;
Slider terrainSize;
Button generate;
Textfield filename;
Toggle stroke;
Toggle colour;
Toggle blend;
Slider heightMod;
Slider snowThresh;

Camera cam = new Camera();
void mouseWheel(MouseEvent event) {
  float e = event.getCount();
  cam.Zoom(e);
}
void keyReleased() {
  if (key == ENTER) {
    generate();
  }
}
void mouseDragged() {
  if (cp5.isMouseOver()) {
    return;
  } else {
    float deltaX = (mouseX - pmouseX) * 0.01f;
    float deltaY = (mouseY - pmouseY) * 0.01f;

    cam.phi += deltaX;
    if (degrees(cam.theta) - degrees(deltaY) > 180
        && degrees(cam.theta) - degrees(deltaY) < 269) {
      cam.theta -= deltaY;
    }
  }
}

void setup() {
    background(0);
    size(800, 800, P3D);
    smooth();
    perspective(radians(90), (float) width / (float) height, 0.1, 1000);
    cp5 = new ControlP5(this);
    rows = cp5.addSlider("rows");
    rows.setPosition(10, 10);
    rows.setSize(150, 10);
    rows.setRange(1, 100);
    rows.setValue(10);

    columns = cp5.addSlider("columns");
    columns.setPosition(10, 30);
    columns.setSize(150, 10);
    columns.setRange(1, 100);
    columns.setValue(10);

    terrainSize = cp5.addSlider("terrainSize");
    terrainSize.setPosition(10, 50);
    terrainSize.setSize(150, 10);
    terrainSize.setRange(20, 50);
    terrainSize.setValue(30);
    terrainSize.setCaptionLabel("terrain size");

    generate = cp5.addButton("generate");
    generate.setPosition(10, 80);
    generate.setSize(80, 20);

    filename = cp5.addTextfield("filename");
    filename.setCaptionLabel("load from file");
    filename.setPosition(10, 110);
    filename.setSize(250, 20);
    filename.setValue("terrain0");
    filename.setAutoClear(false);
    cp5.addToggle("stroke");
    stroke.setPosition(300, 10);
    stroke.setSize(40, 20);
    stroke.setValue(true);

    colour = cp5.addToggle("colour");
    colour.setPosition(350, 10);
    colour.setSize(40, 20);
    colour.setCaptionLabel("color");

    blend = cp5.addToggle("blend")
    blend.setPosition(400, 10) ;
    blend.setSize(40, 20);

    heightMod = cp5.addSlider("heightMod");
    heightMod.setPosition(300, 60);
    heightMod.setSize(100, 10);
    heightMod.setRange(-5, 5);
    heightMod.setValue(1);
    heightMod.setCaptionLabel("height modifier");
    snowThresh = cp5.addSlider("snowThresh");
    snowThresh.setPosition(300, 80);
    snowThresh.setSize(100, 10);
    snowThresh.setRange(1, 5);
    snowThresh.setValue(5);
    .setCaptionLabel("snow threshold");
    }

public void rows(int theValue) {
  rows = theValue;
}
public void columns(int theValue) {
  columns = theValue;
}

Grid grid = null;
PImage heightmap = null;
void generate() {
  grid = null;
  grid = new Grid();
  heightmap = null;
  heightmap = loadImage(
      "data/" + cp5.get(Textfield.class, "filename").getText() + ".png");
  grid.generateHeight();

  start = true;
}

void draw() {
  background(0);
  cam.Update();
  perspective(radians(90), (float) width / (float) height, 0.1, 1000);
  camera(cam.camX, cam.camY, cam.camZ, cam.lookAtX, cam.lookAtY, cam.lookAtZ, 0,
      1, 0);

  if (start == true) {
    grid.Draw();
  }

  camera();
  perspective();
}

class Camera {
  float camX;
  float camY;
  float camZ;
  float radius;
  float theta;
  float phi;
  float lookAtX;
  float lookAtY;
  float lookAtZ;
  void Update() {
    camX = radius * cos(phi) * sin(theta) + lookAtX;
    camY = radius * cos(theta) + lookAtY;
    camZ = radius * sin(theta) * sin(phi) + lookAtZ;
  }
  void Zoom(float zoomFac) {
    if (zoomFac > 0) { // scrolling down
      if (radius < 200) {
        radius += 5;
      }
    } else if (zoomFac < 0) {
      if (radius > 10) {
        radius -= 5;
      }
    }
  }
  Camera() {
    theta = 5.5 * PI / 4;
    phi = 3 * PI / 2;
    radius = 15; // 10-200
    lookAtX = 0;
    lookAtY = 0;
    lookAtZ = 0;
  }
}

class Grid {
  int rows;
  int columns;
  float gridSize;
  ArrayList<PVector> vertdata;
  ArrayList<Integer> tridata;
  Grid() {
    rows = int(cp5.getController("rows").getValue());
    columns = int(cp5.getController("columns").getValue());
    gridSize = cp5.getController("terrainSize").getValue();
    vertdata = new ArrayList<PVector>();
    tridata = new ArrayList<Integer>();
    generateVerts();
    generateTris();
  }
  void generateVerts() {
    float rtemp = -gridSize / 2;
    for (int r = 0; r <= rows; r++) {
      float ctemp = -gridSize / 2;
      for (int c = 0; c <= columns; c++) {
        vertdata.add(new PVector(ctemp, 0, rtemp));
        ctemp += gridSize / columns;
      }
      rtemp += gridSize / rows;
    }
  }
  void generateTris() {
    int verticesrow = columns + 1;
    for (int r = 0; r < rows; r++) {
      for (int c = 0; c < columns; c++) {
        int startIndex = r * verticesrow + c;
        tridata.add(startIndex);
        tridata.add(startIndex + 1);
        tridata.add(startIndex + verticesrow);

        tridata.add(startIndex + 1);
        tridata.add(startIndex + verticesrow + 1);
        tridata.add(startIndex + verticesrow);
      }
    }
  }
  void generateHeight() {
    for (int r = 0; r <= rows; r++) {
      for (int c = 0; c <= columns; c++) {
        float x_index = map(c, 0, columns + 1, 0, heightmap.width);
        float y_index = map(r, 0, rows + 1, 0, heightmap.height);
        int colour = heightmap.get(int(x_index), int(y_index));

        float heightFromColor = map(red(colour), 0, 255, 0, 1.0f);

        int vertex_index = r * (columns + 1) + c;
        vertdata.get(vertex_index).y = -heightFromColor;
      }
    }
  }
  void Draw() {
    if (cp5.getController("stroke").getValue() != 1) {
      noStroke();
    } else {
      stroke(0);
    }
    fill(255, 255, 255);
    float heightMod = cp5.getController("heightMod").getValue();
    float snowThresh = cp5.getController("snowThresh").getValue();

    beginShape(TRIANGLES);
    for (int i = 0; i < tridata.size(); i++) {
      int vertIndex = tridata.get(i);
      PVector vert = vertdata.get(vertIndex);

      if (cp5.getController("colour").getValue() == 1) { // if color is on
        float relativeHeight = abs(vert.y) * heightMod / snowThresh;
        if (0.8 < relativeHeight) {
          if (cp5.getController("blend").getValue() == 1) {
            float ratio = (relativeHeight - 0.8f) / 0.2f;
            fill(lerpColor(rock, snow, ratio));
          } else {
            fill(snow);
          }
        }
        if (0.4 < relativeHeight && relativeHeight < 0.8) {
          if (cp5.getController("blend").getValue() == 1) {
            float ratio = (relativeHeight - 0.4f) / 0.4f;
            fill(lerpColor(grass, rock, ratio));
          } else {
            fill(rock);
          }
        }
        if (0.2 < relativeHeight && relativeHeight < 0.4) {
          if (cp5.getController("blend").getValue() == 1) {
            float ratio = (relativeHeight - 0.2f) / 0.2f;
            fill(lerpColor(dirt, grass, ratio));
          } else {
            fill(grass);
          }
        } else if (relativeHeight < 0.2) {
          if (cp5.getController("blend").getValue() == 1) {
            float ratio = relativeHeight / 0.2f;
            fill(lerpColor(water, dirt, ratio));
          } else {
            fill(water);
          }
        }
      }

      vertex(vert.x, vert.y * heightMod, vert.z);
    }
    endShape();
  }
}
